mu_1_new <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2_new <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[iter, ] <- c(alpha, mu1, mu2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[iter, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
library(ggplot2)
install.packages("ggplot2")
install.packages("reshape2")
library(ggplot2)
# Convert the matrix to a long format data frame for plotting with ggplot2
parameters_df <- as.data.frame(parameters_matrix)
parameters_df$Iteration <- 1:nrow(parameters_df)
parameters_long <- reshape2::melt(parameters_df, id.vars = 'Iteration')
# Plot
ggplot(parameters_long, aes(x = Iteration, y = value, color = variable)) +
geom_line() +
labs(title = "Convergence of Parameters", x = "Iteration", y = "Parameter Value") +
theme_minimal()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 100
epsilon <- 1e-4
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
library(ggplot2)
# Convert the matrix to a long format data frame for plotting with ggplot2
parameters_df <- as.data.frame(parameters_matrix)
parameters_df$Iteration <- 1:nrow(parameters_df)
parameters_long <- reshape2::melt(parameters_df, id.vars = 'Iteration')
# Plot
ggplot(parameters_long, aes(x = Iteration, y = value, color = variable)) +
geom_line() +
labs(title = "Convergence of Parameters", x = "Iteration", y = "Parameter Value") +
theme_minimal()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 3000
epsilon <- 1e-4
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 3000
epsilon <- 1e-4
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 3000
epsilon <- 1e-4
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 1000
epsilon <- 1e-4
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 1500
epsilon <- 1e-4
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
deaths <- 0:9
frequency <- c(162, 267,271,185,111,61,27,8,3,1)
# initial estimates
alpha <- 0.3
mu_1 <- 1
mu_2 <- 2.5
max_iter <- 2000
epsilon <- 1e-4
parameters_matrix <- matrix(nrow = max_iter, ncol = 3)
colnames(parameters_matrix) <- c("alpha", "mu_1", "mu_2")
for (i in 1:max_iter){
# store the iteration values to see the convergence
parameters_matrix[i, ] <- c(alpha, mu_1, mu_2)
z_expected <- alpha * exp(-mu_1) * mu_1^deaths /
(alpha * exp(-mu_1) * mu_1^deaths + (1 - alpha) * exp(-mu_2) * mu_2^deaths)
alpha <- sum(frequency * z_expected)/ sum(frequency)
mu_1 <- sum(frequency * z_expected * deaths) / sum(frequency * z_expected)
mu_2 <- sum(frequency * (1 - z_expected) * deaths) / sum(frequency * (1 - z_expected))
}
parameters_matrix <- parameters_matrix[1:i, ]
# Plotting
par(mfrow = c(1, 3)) # Set up the plotting area to have 3 plots in a row
# Alpha plot
plot(parameters_matrix[, "alpha"], type = 'l', col = 'blue', xlab = 'Iteration', ylab = 'Alpha', main = 'Convergence of Alpha')
grid()
# Mu_1 plot
plot(parameters_matrix[, "mu_1"], type = 'l', col = 'red', xlab = 'Iteration', ylab = 'Mu_1', main = 'Convergence of Mu_1')
grid()
# Mu_2 plot
plot(parameters_matrix[, "mu_2"], type = 'l', col = 'darkgreen', xlab = 'Iteration', ylab = 'Mu_2', main = 'Convergence of Mu_2')
grid()
print(tail(parameters_matrix, n = 5))
beta_pdf <- function(x, alpha, beta){
return ((x^(alpha-1) * (1-x)^(beta-1))/ (gamma(alpha)*gamma(beta)/gamma(alpha+beta)))
}
beta_pdf <- function(x, alpha, beta){
return ((x^(alpha-1) * (1-x)^(beta-1))/ (gamma(alpha)*gamma(beta)/gamma(alpha+beta)))
}
# here the n is the number of trail
accept_reject <- function(alpha, beta, max_iter){
mode <- (alpha-1)/(alpha + beta - 2)
c <- beta_pdf(mode, alpha, beta)
count <- numeric(0)
attempts <- 0
value <- numeric(0)
while(i < max_iter){
i <- i+1
U <- runif(1)
Z <- runif(1)
if (U <= beta_pdf(Z, alpha, beta)/c ){
value <- c(value, Z)
count <- c(count, attempts)
attempts <- 0
}
else
{
attempts <- attempts + 1
}
}
return(data.frame(value, count))
}
result_2_2 <- accept_reject(2, 2, 1000)
result_10_10 <- accept_reject(10, 10, 1000)
hist(result_2_2$value, main="Histogram for Beta(2, 2)", xlab="Value")
View(result_2_2)
# here the n is the number of trail
accept_reject <- function(alpha, beta, max_iter){
mode <- (alpha-1)/(alpha + beta - 2)
c <- beta_pdf(mode, alpha, beta)
count <- numeric(0)
attempts <- 0
value <- numeric(0)
i <- 0
while(i < max_iter){
i <- i+1
U <- runif(1)
Z <- runif(1)
if (U <= beta_pdf(Z, alpha, beta)/c ){
value <- c(value, Z)
count <- c(count, attempts)
attempts <- 0
}
else
{
attempts <- attempts + 1
}
}
return(data.frame(value, count))
}
result_2_2 <- accept_reject(2, 2, 1000)
result_10_10 <- accept_reject(10, 10, 1000)
hist(result_2_2$value, main="Histogram for Beta(2, 2)", xlab="Value")
result_2_2 <- accept_reject(2, 2, 9000)
result_10_10 <- accept_reject(10, 10, 3000)
hist(result_2_2$value, main="Histogram for Beta(2, 2)", xlab="Value")
hist(result_2_2$value, breaks = 20, main="Histogram for Beta(2, 2)", xlab="Value")
hist(result_2_2$value, breaks = 50, main="Histogram for Beta(2, 2)", xlab="Value")
hist(result_2_2$value, breaks = 30, main="Histogram for Beta(2, 2)", xlab="Value")
print(paste("Average proposals per accepted sample for Beta(2, 2):",
mean(result_2_2$count)))
View(result_10_10)
View(result_10_10)
View(result_2_2)
View(result_2_2)
# here the n is the number of trail
accept_reject <- function(alpha, beta, max_iter){
mode <- (alpha-1)/(alpha + beta - 2)
c <- beta_pdf(mode, alpha, beta)
count <- numeric(0)
attempts <- 0
value <- numeric(0)
i <- 0
while(i < max_iter){
i <- i+1
U <- runif(1)
Z <- runif(1)
if (U <= beta_pdf(Z, alpha, beta)/c ){
value <- c(value, Z)
attempts <- attempts + 1
count <- c(count, attempts)
attempts <- 0
}
else
{
attempts <- attempts + 1
}
}
return(data.frame(value, count))
}
result_2_2 <- accept_reject(2, 2, 9000)
hist(result_2_2$value, breaks = 30, main="Histogram for Beta(2, 2)", xlab="Value")
print(paste("Average proposals per accepted sample for Beta(2, 2):",
mean(result_2_2$count)))
result_10_10 <- accept_reject(10, 10, 15000)
hist(result_10_10$value, breaks = 30, main="Histogram for Beta(10, 10)", xlab="Value")
hist(result_10_10$value, breaks = 30, main="Histogram for Beta(10, 10)", xlab="Value")
print(paste("Average proposals per accepted sample for Beta(10, 10):",
mean(result_10_10$count)))
beta_pdf(1/2, 2, 2)
beta_pdf(1/2, 10, 10)
set.seed(0)
f <- function(x) {
cos(pi * x / 2)
}
set.seed(0)
f <- function(x) {
cos(pi * x / 2)
}
max_iter = 1000
u <- runif(max_iter)
f_u <- aaply(u, f)
max_iter = 1000
u <- runif(max_iter)
library(dplyr)
f_u <- aaply(u, f)
max_iter = 1000
u <- runif(max_iter)
library(dplyr)
f_u <- aaply(u, f)
max_iter = 1000
u <- runif(max_iter)
library(plyr)
f_u <- aaply(u, f)
max_iter = 1000
u <- runif(max_iter)
f_u <- sapply(u, f)
print(mean(f_u))
max_iter = 5000
u <- runif(max_iter)
f_u <- sapply(u, f)
print(mean(f_u))
max_iter = 5000
important_f <-function(x){
cos(pi * x / 2)/beta_pdf(x, 1, 1.5)
}
u <- rbeta(max_iter, 1, 1.5)
f_u_ <- sapply(u, important_f )
print(mean(f_u_))
var(f_u)
var(f_u_)
hist(result_2_2$value, breaks = 30, main="Histogram for Beta(2, 2)", xlab="Value")
result_2_2 <- accept_reject(2, 2, 9000)
hist(result_2_2$value, breaks = 30, main="Histogram for Beta(2, 2)", xlab="Value")
# read the data from the folder
# directory is the directory of the folder
load_train_data <- funcrtion(directory){
training_text <- load_train_data("train")
source("~/Desktop/2023-Fall/S610/final/final.R", echo=TRUE)
source("~/Desktop/2023-Fall/S610/final/final.R", echo=TRUE)
source("~/Desktop/2023-Fall/S610/final/final.R", echo=TRUE)
# read the date from book in the booklist
train <- lapply(booklist, read_txt)
source("~/Desktop/2023-Fall/S610/final/final.R", echo=TRUE)
source("~/Desktop/2023-Fall/S610/final/final.R")
source("~/Desktop/2023-Fall/S610/final/final.R")
training_text <- load_train_data("books")
source("~/Desktop/2023-Fall/S610/final/final.R")
return(0)
train_model(training_text, 2)
# now we get the transition probability of the words for the markkov model
train_model <- function(training_text, n_gram=2){
# first we need to get the transition probability of the words
# we need to get the n_gram transition probability,
# i.e. P(w_i|w_i-1, w_i-2, ..., w_i-n)
# generate the n_grams
total_words <- length(training_text)
cat(total_words)
return(0)
}
train_model(training_text, 2)
# now we get the transition probability of the words for the markkov model
train_model <- function(training_text, n_gram=2){
# first we need to get the transition probability of the words
# we need to get the n_gram transition probability,
# i.e. P(w_i|w_i-1, w_i-2, ..., w_i-n)
# generate the n_grams
total_words <- length(training_text)
return(total_words)
}
train_model(training_text, 2)
# now we get the transition probability of the words for the markkov model
train_model <- function(training_text, n_gram=2){
# first we need to get the transition probability of the words
# we need to get the n_gram transition probability,
# i.e. P(w_i|w_i-1, w_i-2, ..., w_i-n)
# generate the n_grams
total_words <- length(training_text)[[1]]
return(total_words)
}
train_model(training_text, 2)
source("~/Desktop/2023-Fall/S610/final/final.R")
cat(train_model(training_text, 2))
# generate the n_grams
total_words <- length(training_text)
# now we get the transition probability of the words for the markkov model
train_model <- function(training_text, n_gram=2){
# first we need to get the transition probability of the words
# we need to get the n_gram transition probability,
# i.e. P(w_i|w_i-1, w_i-2, ..., w_i-n)
# generate the n_grams
total_words <- length(training_text)
return(total_words)
}
cat(train_model(training_text, 2))
source("~/Desktop/2023-Fall/S610/final/final.R")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
source("~/Desktop/2023-Fall/S610/final/final.R")
generate_readable_text <- function(text){
# first we need to capitalize the first letter of the first word
text[1] <- toupper(text[1])
# then we need to capitalize the first letter of the word after the punctuation
for (i in 2:length(text)){
if (text[i-1] %in% c(".", "?", "!")){
text[i] <- toupper(text[i])
}
}
# then we need to add space between the words
# if the next word is a punctuation, no need to add a space.
for (i in 2:length(text)){
if (text[i] %in% c(".", "?", "!")){
text[i-1] <- paste(text[i-1], sep = "")
} else {
text[i-1] <- paste(text[i-1], sep = " ")
}
}
# then we need to add space between the last word and the punctuation
text[length(text)] <- paste(text[length(text)], sep = "")
return(text)
}
cat(generate_readable_text(sample))
generate_readable_text <- function(text){
# first we need to capitalize the first letter of the first word
text[1] <- capitalize_first_letter(text[1])
# then we need to capitalize the first letter of the word after the punctuation
for (i in 2:length(text)){
if (text[i-1] %in% c(".", "?", "!")){
text[i] <- capitalize_first_letter(text[i])
}
}
# then we need to add space between the words
# if the next word is a punctuation, no need to add a space.
for (i in 2:length(text)){
if (text[i] %in% c(".", "?", "!")){
text[i-1] <- paste(text[i-1], sep = "")
} else {
text[i-1] <- paste(text[i-1], sep = " ")
}
}
# then we need to add space between the last word and the punctuation
text[length(text)] <- paste(text[length(text)], sep = "")
return(text)
}
cat(generate_readable_text(sample))
capitalize_first_letter <- function(text){
text <- paste0(toupper(substr(text, 1, 1)),
substr(text, 2, nchar(text)))
return(text)
}
cat(generate_readable_text(sample))
source("~/Desktop/2023-Fall/S610/final/final.R")
